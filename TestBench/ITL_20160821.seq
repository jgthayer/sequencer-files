################################################################################
#  ITL.seq                                                                     #
#  ASM sequencer configuration file for use with the fpga on the LSSTcam       #
#  curvature wavefront sensor readout electronics board: WREB.                 #
#                                                                              #                                                                              #
#  Author: P. Doherty                                                          #
#  Date: August 21, 2016                                                        #
#                                                                              #
################################################################################

[constants]
    
    # Timing Parameters  
    ParDelay:  2100 ns       #  Parallel Clock State Duration
    SerDelay:   120 ns       #  Serial Clock State Duration
    RampDelay:  400 ns       #  Integrator Dwell Time
    

################################################################################ 
#  Clocks are the bit assignments for the sequence engine.                     #
#                                                                              # 
[clocks]
    RU:     0     # ASPIC ramp-up integration
    RD:     1     # ASPIC ramp-down integration
    RST:    2     # ASPIC integrator reset
    CL:     3     # ASPIC clamp
    S1:     4     # Serial clock 1
    S2:     5     # Serial clock 2
    S3:     6     # Serial clock 3
    RG:     7     # CCD reset gate
    P1:     8     # Parallel clock 1
    P2:     9     # Parallel clock 2
    P3:    10     # Parallel clock 3
    P4:    11     # Parallel clock 4
    TRG:   12     # ADC trigger
    SOI:   13     # Start of image
    EOI:   14     # End of image 
    TIMER: 15     # Used interanally when timing (does not DO anything) 
    SYNC:  16     # External synchronization pulse
    SHTR:  17     # Shutter Output


################################################################################     
#  pointers   can define a pointer to a function or to a repetition number 
#              (for subroutines or functions)
#  
[pointers] 
    REP_FUNC Exptime    1000   # Integration Time: milliseconds
    REP_FUNC OpenDelay     0   # Shutter open  delay: milliseconds
    REP_FUNC CloseDelay  800   # Shutter close delay: milliseconds
    REP_FUNC SlopeDelay 1000   # delay between rows in 'slope' mode, in us
    
    REP_SUBR ClearCount    2   # number of clears before integration

    REP_SUBR SegRows    2000   #  Number of physical rows of the sensor 
    REP_SUBR PreRows       0   #  Number of rows to discard before ROI 
    REP_SUBR ReadRows   2020   #  Number of binned rows to read in the ROI
    REP_SUBR PostRows      0   #  Number of rows to discard after  ROI
    REP_SUBR OverRows      0   #  Number of rows to read after image is read

    REP_SUBR PumpRows      1   #  Number of rows to discard after ROI
    REP_SUBR PumpCount   100   #  Number of rows to read after image is read

    REP_FUNC SegCols     509   #  Number of physical columns of the sensor 
    REP_FUNC PreCols       0   #  Number of cols to discard before ROI  
    REP_FUNC ReadCols    540   #  Number of cols to read in the ROI
    REP_FUNC PostCols      0   #  Number of cols to discard after ROI
    REP_FUNC OverCols      0   #  Number of cols to read after image is read
    
    REP_FUNC BinPar        1   # Parallel Binning factor
    REP_FUNC BinSer        1   # Serial binning factor
    
    REP_SUBR RepCount      1   # Used in 'atomic' level functions
    
################################################################################ 
#  Functions                                                                   #
#  Wave-front Sensor Acquisition Mode Function Definitions                     #
#                                                                              #
#  Functions are the lowest level of programming for the sequencer             #
#  Functions consist of timeslices in which a set of clocks are                #
#  assigned a particular value for a defined period of time.                   #
#                                                                              #
[functions]      
    Default: # Default state when not operating
      clocks: RU,RD,RST,CL,S1,S2,S3,RG,P1,P2,P3,P4,TRG,SOI,EOI
      slices:     
        1us = 0,0,1,1,1,1,0,1,0,0,1,0,0,0,0
               

#  ******************************************************************* #
#   ITL Clocking Functions

    Serial_Shift:  # Shift a pixel in the output register
       clocks: S1,S2,S3
       slices:
         SerDelay = 1,1,0
         SerDelay = 1,0,0 
         SerDelay = 1,0,1 
         SerDelay = 0,0,1 
         SerDelay = 0,1,1 
         SerDelay = 0,1,0 
         SerDelay = 1,1,0 
       constants: P1=0,P2=1,P3=0,RST=1,CL=1

            
    Serial_Discard:  # Discard a pixel from the output register
       clocks: S1,S2,S3,RG
       slices:
         SerDelay = 1,1,0,1 
         SerDelay = 1,0,0,1 
         SerDelay = 1,0,1,1 
         SerDelay = 0,0,1,1  
         SerDelay = 0,1,1,1 
         SerDelay = 0,1,0,1 
         SerDelay = 1,1,0,0 
       constants: P1=0,P2=1,P3=0,RST=1,CL=1
            

    Parallel_Shift_Forward:  # Forward shift from image array to output register
       clocks: P1,P2,P3,P4
       slices:
         ParDelay = 0,1,0,0 
         ParDelay = 0,1,1,0 
         ParDelay = 0,0,1,0 
         ParDelay = 1,0,1,0 
         ParDelay = 1,0,0,0 
         ParDelay = 1,1,0,0 
         ParDelay = 0,1,0,0
       constants: S1=1,S2=1,S3=0,RG=1,RST=1,CL=1

            
#    Parallel_Shift_Reverse:  # Reverse shift a row in the image array
#       clocks: P1,P2,P3,P4
#       slices:
#         ParDelay = 0,1,0,0
#         ParDelay = 1,1,0,0 
#         ParDelay = 1,0,0,0 
#         ParDelay = 1,0,1,0 
#         ParDelay = 0,0,1,0 
#         ParDelay = 0,1,1,0 
#         ParDelay = 0,1,0,0 
#       constants: S1=1,S2=1,S3=0,RG=1,RST=1,CL=1
          

    Parallel_Dump:  # Discard a row from the image array
       clocks: P1,P2,P3,P4
       slices:
         ParDelay = 0,1,0,0 
         ParDelay = 0,1,1,0 
         ParDelay = 0,0,1,0 
         ParDelay = 1,0,1,0 
         ParDelay = 1,0,0,0 
         ParDelay = 1,1,0,0 
         ParDelay = 0,1,0,0 
       constants: S1=1,S2=1,S3=1,RG=1,RST=1,CL=1
       
        
    Bin1_Pixel_Readout:  # Read a pixel using binning factor of one
       clocks: RU,RD,RST,CL,S1,S2,S3,RG,TRG,SYNC
       slices:
         100 ns      = 0,0,1,1,1,0,0,1,0,0  # RST CL S1       RG
         100 ns      = 0,0,1,1,1,0,1,0,0,1  # RST CL S1    S3 RG
         100 ns      = 0,0,1,1,0,0,1,0,0,0  # RST CL       S3
         100 ns      = 0,0,0,1,0,1,1,0,0,0  #     CL    S2 S3
         100 ns      = 0,0,0,0,0,1,0,0,0,0  #           S2
         150 ns      = 0,0,0,0,1,1,0,0,0,0  #        S1 S2
         RampDelay   = 1,0,0,0,1,1,0,0,0,0  # RU     S1 S2
         10 ns       = 0,0,0,0,1,1,0,0,0,0  #        S1 S2
         400 ns      = 0,0,0,0,1,0,0,0,0,0  #        S1 (S2 falls)
         RampDelay   = 0,1,0,0,1,0,0,0,0,0  # RD     S1
         120 ns      = 0,0,0,0,1,0,0,0,0,0  #        S1
         20 ns       = 0,0,0,0,1,0,0,0,1,0  # TRG    S1
         20 ns       = 0,0,0,0,1,0,0,0,0,0  #        S1
       constants: P1=0,P2=1,P3=0


#    Shift_and_Ramp_Up:  # Shift and Ramp Up
#       clocks: RU,RD,RST,CL,S1,S2,S3,RG,TRG,SYNC
#       slices:
#         120 ns      = 0,0,1,1,1,0,0,1,0,0  # RST CL S1       RG
#         120 ns      = 0,0,1,1,1,0,1,1,0,0  # RST CL S1       RG
#         120 ns      = 0,0,1,1,0,0,1,0,0,0  # RST CL       S3
#         120 ns      = 0,0,1,1,0,1,1,0,0,0  # RST CL    S2 S3
#         120 ns      = 0,0,0,1,0,1,0,0,0,0  #     CL    S2
#          50 ns      = 0,0,0,0,1,1,0,0,0,0  #        S1 S2
#         RampDelay   = 1,0,0,0,1,1,0,0,0,0  # RU     S1 S2
#       constants: P1=0,P2=1,P3=0
     

#    Ramp_Down_and_Convert:  # Ramp Down and Convert
#       clocks: RU,RD,RST,CL,S1,S2,S3,RG,TRG,SYNC
#       slices:   
#         10 ns       = 0,0,0,0,1,1,0,0,0,0  #        S1 S2
#         400 ns      = 0,0,0,0,1,0,0,0,0,0  #        S1 (S2 falls)
#         RampDelay   = 0,1,0,0,1,0,0,0,0,0  # RD     S1
#         20 ns       = 0,0,0,0,1,0,0,0,0,0  #        S1
#         50 ns       = 0,0,0,0,1,0,0,0,1,0  # TRG    S1
#         20 ns       = 0,0,0,0,1,0,0,0,0,0  #        S1
#       constants: P1=0,P2=1,P3=0


# TDI Mode: Redundant fcuntions with the SHTR bit set high
#           These will go away when the REB is not doing the shutter

    TDI_Parallel_Shift:  # Forward shift during 'TDI' frame acquisition
       clocks: P1,P2,P3,P4
       slices:
         ParDelay = 0,1,0,0 
         ParDelay = 0,1,1,0 
         ParDelay = 0,0,1,0 
         ParDelay = 1,0,1,0 
         ParDelay = 1,0,0,0 
         ParDelay = 1,1,0,0 
         ParDelay = 0,1,0,0
       constants: S1=1,S2=1,S3=0,RG=1,RST=1,CL=1,SHTR=1

    TDI_Pixel_Readout:  # Read a pixel using binning factor of one
       clocks: RU,RD,RST,CL,S1,S2,S3,RG,TRG,SYNC
       slices:
         100 ns      = 0,0,1,1,1,0,0,1,0,0  # RST CL S1       RG
         100 ns      = 0,0,1,1,1,0,1,1,0,0  # RST CL S1    S3 RG
         100 ns      = 0,0,1,1,0,0,1,0,0,0  # RST CL       S3
         100 ns      = 0,0,0,1,0,1,1,0,0,0  #     CL    S2 S3
         100 ns      = 0,0,0,0,0,1,0,0,0,0  #           S2
         150 ns      = 0,0,0,0,1,1,0,0,0,0  #        S1 S2
         RampDelay   = 1,0,0,0,1,1,0,0,0,0  # RU     S1 S2
         10 ns       = 0,0,0,0,1,1,0,0,0,0  #        S1 S2
         400 ns      = 0,0,0,0,1,0,0,0,0,0  #        S1 (S2 falls)
         RampDelay   = 0,1,0,0,1,0,0,0,0,0  # RD     S1
         120 ns      = 0,0,0,0,1,0,0,0,0,0  #        S1
         20 ns       = 0,0,0,0,1,0,0,0,1,0  # TRG    S1
         20 ns       = 0,0,0,0,1,0,0,0,0,0  #        S1
       constants: P1=0,P2=1,P3=0,SHTR=1

# *************************************************************
# Standard functions, common to both sensors
#

    StartImage:  # signal that data is going to be generated
       clocks: SOI
       slices:
        10000 ns    = 0  # lets ADC finish previous conversion and transfer
        100 ns      = 1
        100 ns      = 0
       constants: S1=1,S2=1,S3=0,RG=1,P1=0,P2=1,P3=0,RST=1,CL=1

    EndImage:  # signal that data is generation is finished
       clocks: EOI
       slices:
        10000 ns    = 0  # lets ADC finish previous conversion and transfer
        100 ns      = 1
        100 ns      = 0
       constants: S1=1,S2=1,S3=0,RG=1,P1=0,P2=1,P3=0,RST=1,CL=1

    Sync:  # synchronization pulse (WREB/GREB testing only)
       clocks: SYNC
       slices:
         10 us = 0
          1 us = 1
         10 us = 0
       constants: S1=1,S2=1,S3=0,RG=1,P1=0,P2=1,P3=0,RST=1,CL=1

#  ******************************************************************* #
#   Timing Functions                                                   #
#   Not normally used, only required when REB is controlling shutter   #
#                                                                      #
 
    Light1ms:  # open the shutter and integrate light for 1 ms
       clocks: SHTR,SYNC
       slices:
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
         62500 ns = 1,1
       constants: S1=1,S2=1,S3=0,RG=1,P1=0,P2=1,P3=0,RST=1,CL=1
       
    Dark1ms:  # integrate dark current for 1 ms
       clocks: SHTR,SYNC
       slices:
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
         62500 ns = 0,1
       constants: S1=1,S2=1,S3=0,RG=1,P1=0,P2=1,P3=0,RST=1,CL=1

    Delay1ms:  # do nothing for 1 ms
       clocks: SYNC
       slices:
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
         62500 ns = 0
       constants: S1=1,S2=1,S3=0,RG=1,P1=0,P2=1,P3=0,RST=1,CL=1

    TDI1us:  # pause with shutter open for 1 us
       clocks: SHTR,SYNC
       slices:
         500 ns = 1,0
         500 ns = 1,0
       constants: S1=1,S2=1,S3=0,RG=1,P1=0,P2=1,P3=0,RST=1,CL=1

#  ******************************************************************* #
#   Sequencer Routines                                                 #
#   Functions are combined into 'subroutines'                          #
#                                                                      #

[subroutines]   

    SinglePixelShift:
        CALL  Serial_Shift
        RTS
       
    SinglePixelDiscard:
        CALL  Serial_Discard
        RTS
        
    SinglePixelRead:
        CALL  Bin1_Pixel_Readout
        RTS

    SerialRegisterClear:            
        CALL  Serial_Discard    repeat(@SegCols)
        RTS

    SerialRegisterRead: 
        CALL  Serial_Discard      repeat(@PreCols)
        CALL  Bin1_Pixel_Readout  repeat(@ReadCols)
        CALL  Serial_Discard      repeat(@PostCols)
        CALL  Bin1_Pixel_Readout  repeat(@OverCols)  
        RTS

    SingleRowRead:
        CALL  Sync
        CALL  Parallel_Shift_Forward  repeat(@BinPar)
        CALL  Serial_Discard      repeat(@PreCols)
        CALL  Bin1_Pixel_Readout      repeat(@ReadCols)
        
        CALL  Bin1_Pixel_Readout      repeat(@OverCols)
        RTS

    SingleRowForward:
        CALL  Parallel_Shift_Forward   repeat(@BinPar)
        RTS

    SingleRowBackward:
        CALL  Parallel_Shift_Reverse   repeat(@BinPar)
        RTS

    SingleTDIRow:
        #CALL  Sync
        CALL  TDI_Parallel_Shift
        CALL  TDI_Pixel_Readout   repeat(@ReadCols)
        CALL  TDI1us  repeat(@SlopeDelay)
        RTS
 
    SingleRowClear:  # Flush a single row off the CCD            
        CALL  Parallel_Shift_Forward
        CALL  Serial_Discard    repeat(@SegCols)
        RTS
       
#    SingleROIRow:
#        CALL  Parallel_Shift_Forward
#        CALL  Serial_Discard      repeat(@PreCols)
#        CALL  Bin1_Pixel_Readout  repeat(@ReadCols)
#        CALL  Serial_Discard      repeat(@PostCols)
#        RTS    

    CCDFullRead:
        CALL  StartImage
        JSR   SingleRowRead   repeat(@ReadRows)
        JSR   SingleRowRead   repeat(@OverRows)
        CALL  EndImage
        RTS  

    CCDTDIRead:
        CALL  StartImage
        JSR   SingleTDIRow   repeat(@ReadRows)
        CALL  EndImage
        RTS  
        
#    CCDROIRead:
#        CALL  StartImage
#        JSR   SingleRowClear        repeat(@PreRows)
#        JSR   SingleROIRow    repeat(@ReadRows)
#        JSR   SingleRowClear        repeat(@PostRows)
#        CALL  EndImage
#        RTS     

    CCDFastClear: # Flush the entire image array once, FAST            
        CALL  Parallel_Dump   repeat(2000)
        JSR  SingleRowClear
        RTS

    CCDSlowClear: # Flush the entire image array, SLOWLY            
        JSR  SingleRowClear   repeat(@SegRows)
        RTS

    PocketPump:
        CALL  Parallel_Shift_Forward   repeat(@PumpRows)
        CALL  Parallel_Shift_Reverse   repeat(@PumpRows)
        RTS

    IntLight:
        CALL   Light1ms  repeat(@OpenDelay)  # shutter open delay
        CALL   Light1ms  repeat(@Exptime)    # integrate light
        CALL   Delay1ms  repeat(@CloseDelay) # shutter close delay
        RTS
    
    IntDark:        
        CALL   Delay1ms  repeat(@OpenDelay)  # shutter open delay
        CALL   Dark1ms   repeat(@Exptime)
        CALL   Delay1ms  repeat(@CloseDelay) # shutter close delay
        RTS
            
        
#  *********************************************************** #
#   Main routines                  

[mains]
#  *********************************************************** #
#  Frame Acquisition Operations
#       BiasFrame - acquire a bias image frame                                                   
#       DarkFrame - Acquire a frame with darck current integration                                                         
#       ObjectFrame - Acquire a frame with shuttered exposure
#       RampFrame - Acquire an object frame with fixed row delay                                                         
#       PumpFrame - Acquire an object frame with pocket pumping                                                         
#                                                           
    BiasFrame:
        JSR   CCDFastClear  repeat(@ClearCount)             
        JSR   CCDFullRead
        END

    DarkFrame:
        JSR   CCDFastClear  repeat(@ClearCount)       
        JSR   IntDark       
        JSR   CCDFullRead
        END

    ObjectFrame:
        JSR   CCDFastClear  repeat(@ClearCount)
        JSR   IntLight    
        JSR   CCDFullRead 
        END

    RampFrame:                                                           
        JSR   CCDFastClear  repeat(@ClearCount)
        JSR   CCDTDIRead
        END

    PumpFrame:                                                           
        JSR   CCDFastClear  repeat(@ClearCount)
        JSR   IntLight
        JSR   PocketPump    repeat(@PumpCount)
        JSR   CCDFullRead 
        END

#  *********************************************************** #
#  CCD Operations:
#       CCDRead - read the ccd based on format parameters
#       CCDClear - clear ccd, possibly more than once
#       CCDReverse - reverse flush the whole CCD
#                                                           
    CCDRead: 
        JSR   CCDFullRead     
        END
     
    CCDClear:
        JSR   ClearFast  repeat(@ClearCount)
        END

    CCDClear:
        JSR   CCDFastClear  repeat(@RepCount)
        END
	
#  *********************************************************** #
#  Row operations:
#       RowRead    -  read N rows off the CCD                          
#       RowDiscard -  discard N rows                                
#       RowBin     -  bin N rows into the serial register               
#       RowReverse -  shift N rows backwards  
#       TDIRows    -  read N rows in TDI mode
#                                                                  
    RowRead:
        JSR   SingleRowRead  repeat(@RepCount)
        END

    RowDiscard:
        JSR   SingleRowClear repeat(@RepCount)
        END

    RowBin:
        JSR   SingleRowForward  repeat(@RepCount)
        END

    RowReverse:                                                      
        JSR   SingleRowBackward  repeat(@RepCount)
        END
        
    TDIRows:
        JSR   SingleTDIRow  repeat(@RepCount)
        END
        
#  *********************************************************** #
#  Serial Register operations:
#       SerRead  - read the serial register 
#       SerClear - clear serial register
#                                                           
    SerRead: 
        JSR   SerialRegisterRead  repeat(@RepCount)
        END

    SerClear:
        JSR   SerialRegisterClear repeat(@RepCount)
        END

#  *********************************************************** #
#  Pixel Operations:
#       PixRead - read N pixels
#       PixDiscard - discard N pixels from serial register       
#       PixBin - bin N pixels

    PixRead:
        JSR   SinglePixelRead  repeat(@RepCount)
        END

    PixDiscard:
        JSR   SinglePixelDiscard  repeat(@RepCount)
        END

    PixBin:
        JSR   SinglePixelShift  repeat(@RepCount)
        END

#  *********************************************************** #
#  ContClear - continuously clear the ccd
#     Make RepCount REALLY big, use STOP to terminate
#                                                              
    ContClear:
        JSR   SingleRowClear  repeat(@RepCount)
        END





