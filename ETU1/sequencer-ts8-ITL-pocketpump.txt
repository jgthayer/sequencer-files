# REB4 timing for ITL CCD
# Original file: E2V file for TS8 by Homer Neal
# 20161116: Modified by Claire Juramy for ITL sensors
# 20161118: CJ: Added functions to expose without flushing, tweaked timing 
# 20161201: CJ: Added pocket pumping

[constants]  # will be substituted in the code at compilation time, if used
    SegRows:        2000    # Number of rows of the sensor
    SegCols:         509    # Number of columns of the sensors
    SerCols:         512    # Size of serial register
    DetectorCols:    576    # Total number of columns in a full readout
    DetectorRows:   2048    # Total number of rows in a full readout
    TimeP:           7000 ns   # Base time element of parallel transfers  TBC: might need to be longer 
    BufferP:         1000 ns   # Parallel transfer buffer time
    ISO1:             200 ns   # Time between ASPIC clamp and first ramp
    ISO2:             400 ns   # Time between ASPIC ramps
    TimeS:            100 ns   # Base element of serial transfers
    BufferS:           90 ns   # Buffer for serial clock crossing
    FlushS:           710 ns   # Base element of serial flush
    RampTime:         320 ns   # ASPIC ramp time
    clockperiod:       10 ns   # FPGA clock period (required by the interpreter)

[clocks]  # clock channels
    P1:   8  # Parallel clock 1
    P2:   9  # Parallel clock 2
    P3:  10  # Parallel clock 3
    P4:  11  # Parallel clock 4
    S1:   4  # Serial clock 1
    S2:   5  # Serial clock 2
    S3:   6  # Serial clock 3
    RG:   7  # Serial reset clock
    CL:   3  # ASPIC clamp
    RST:  2  # ASPIC integrator reset
    RD:   1  # ASPIC ramp-down integration
    RU:   0  # ASPIC ramp-up integration
    TRG: 12  # ADC sampling trigger
    SOI: 13  # Start of image
    EOI: 14  # End of image
    SHU: 16  # Shutter TTL (for testing only)

[pointers]  # can define a pointer to a function or to a repetition number (for subroutines or functions)
    REP_FUNC    PreCols        0  # Number of columns to skip before readout window, including prescan
    REP_FUNC    ReadCols     576  # Number of columns to read
    REP_FUNC    PostCols       0  # Number of columns to discard after window (it is up to the user that total columns = 576)
    REP_SUBR    ExposureTime 1200 # Duration of exposure in units of 25 ms
    REP_SUBR    PreRows        0  # Number of rows to skip before window
    REP_SUBR    ReadRows     2048 # Number of rows of the window
    REP_SUBR    PostRows        0 # Number of rows after window (it is up to the user that total lines = 2048)
    REP_SUBR    CleaningNumber  0 # Number of full CCD clears before acquiring a frame
    REP_SUBR    PumpNumber   1000 # Number of parallel pumps
    PTR_FUNC    Exposure       ExposureFlush  # Function to use during exposure (DarkFlush or ExposureFlush or DarkNoFlush or ExposureNoFlush)

[functions]
    Default:  # Default state when not operating
      clocks:          P2, S1, RG, CL, RST
      slices:
         1 us        =  1,  1,  1,  1,  1

    TransferLine:  # Single line transfer
      clocks:          P1, P2, P3, RG, S2
      slices:
         BufferP     = 0,  1,  0,  1,  1
         TimeP       = 0,  1,  1,  1,  1
         TimeP       = 0,  0,  1,  1,  1
         TimeP       = 1,  0,  1,  1,  1
         TimeP       = 1,  0,  0,  1,  1
         TimeP       = 1,  1,  0,  1,  1
         TimeP       = 0,  1,  0,  0,  0
      constants:     S1=1, RST=1

    ReverseLine:  # Single line transfer in the reverse direction
      clocks:          P1, P2, P3, RG, S2
      slices:
         BufferP     = 0,  1,  0,  1,  1
         TimeP       = 1,  1,  0,  1,  1
         TimeP       = 1,  0,  0,  1,  1
         TimeP       = 1,  0,  1,  1,  1
         TimeP       = 0,  0,  1,  1,  1
         TimeP       = 0,  1,  1,  1,  1
         TimeP       = 0,  1,  0,  0,  0
      constants:     S1=1, RST=1

    ReadPixel:  # Single pixel read
      clocks:          RG, S1, S2, S3, CL, RST, RD, RU, TRG
      slices:
         BufferS     = 1,  1,  0,  1,  0,  0,  0,  0,  0
         TimeS       = 1,  0,  0,  1,  0,  0,  0,  0,  0
         BufferS     = 1,  0,  1,  1,  0,  0,  0,  0,  1
         TimeS       = 0,  0,  1,  0,  0,  1,  0,  0,  0
         230 ns      = 0,  1,  1,  0,  1,  1,  0,  0,  0
         ISO1        = 0,  1,  1,  0,  0,  0,  0,  0,  0
         RampTime    = 0,  1,  1,  0,  0,  0,  1,  0,  0
         20 ns       = 0,  1,  1,  0,  0,  0,  0,  0,  0
         ISO2        = 0,  1,  0,  0,  0,  0,  0,  0,  0
         RampTime    = 0,  1,  0,  0,  0,  0,  0,  1,  0
         30 ns       = 0,  1,  0,  0,  0,  0,  0,  0,  0
      constants:     P2=1

    StartOfImage:  # Signals start of frame to be recorded
      clocks:         SOI
      slices:
        1600 ns     = 0  # lets ADC finish previous conversion and transfer
        100 ns      = 1
        100 ns      = 0
      constants:    P2=1, S1=1, RST=1

    EndOfImage:  # Signals end of frame to be recorded
      clocks:         EOI
      slices:
        1600 ns     = 0  # lets ADC finish conversion and transfer
        100 ns      = 1
        100 ns      = 0
      constants:    P2=1, S1=1, RST=1

    SerialFlush:  # Single pixel fast flush
      clocks:          RG, S1, S2, S3
      slices:
         100 ns      = 0,  1,  0,  0
         BufferS     = 1,  1,  0,  1
         210 ns      = 1,  0,  0,  1
         BufferS     = 1,  0,  1,  1
         210 ns      = 0,  0,  1,  0
         BufferS     = 0,  1,  1,  0
         210 ns      = 0,  1,  0,  0
      constants:     P2=1, RST=1

    ExposureFlush:  # Exposure while flushing serial register (testing only), 2500 ns duration
      clocks:          RG, S1, S2, S3
      slices:
         100 ns      = 0,  1,  0,  0
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  0,  1,  1
         FlushS      = 0,  0,  1,  0
         BufferS     = 0,  1,  1,  0
         FlushS      = 0,  1,  0,  0
      constants:     P2=1, RST=1, SHU=1

    DarkFlush:  # Shutter closed while flushing serial register (testing only), 2500 ns duration
      clocks:          RG, S1, S2, S3
      slices:
         100 ns      = 0,  1,  0,  0
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  0,  1,  1
         FlushS      = 0,  0,  1,  0
         BufferS     = 0,  1,  1,  0
         FlushS      = 0,  1,  0,  0
      constants:     P2=1, RST=1, SHU=0

    ExposureNoFlush:  # Shutter open and no flushing (testing only), 2500 ns duration
      clocks:          RG, S1, S2, S3
      slices:
         1250 ns     = 1,  1,  1,  0
         1250 ns     = 1,  1,  1,  0
      constants:     P2=1, RST=1, SHU=1

    DarkNoFlush:  # Shutter closed and no flushing (testing only), 2500 ns duration
      clocks:          RG, S1, S2, S3
      slices:
         1250 ns     = 1,  1,  1,  0
         1250 ns     = 1,  1,  1,  0
      constants:     P2=1, RST=1, SHU=0

    SlowFlush:  # Simultaneous serial and parallel flush, slow (waiting pattern)
      clocks:         RG, S1, S2, S3, P1, P2, P3
      slices:
         TimeP       = 1,  1,  0,  0,  0,  1,  0
         TimeP       = 1,  1,  0,  1,  0,  1,  0
         TimeP       = 0,  0,  0,  1,  0,  1,  0
         TimeP       = 0,  0,  1,  1,  0,  1,  0
         TimeP       = 0,  0,  1,  0,  0,  1,  0
         TimeP       = 0,  1,  1,  0,  0,  1,  0
         20000 ns    = 1,  1,  1,  0,  0,  1,  1
         20000 ns    = 1,  1,  1,  0,  0,  0,  1
         20000 ns    = 1,  1,  1,  0,  1,  0,  1
         20000 ns    = 1,  1,  1,  0,  1,  0,  0
         20000 ns    = 1,  1,  1,  0,  1,  1,  0
         20000 ns    = 1,  1,  1,  0,  0,  1,  0
         20000 ns    = 0,  1,  0,  0,  0,  1,  0

[subroutines]
#
# Line-level operations ---------------------------------------------
#
    FlushLine:  # Transfer line and flush it
        CALL    TransferLine
        CALL    SerialFlush     repeat(DetectorCols)
        RTS

    WindowLine:  # Line readout
        CALL    TransferLine
        CALL    SerialFlush     repeat(@PreCols)
        CALL    DarkFlush                         # generates first pixel to read with ReadPixel
        CALL    ReadPixel       repeat(@ReadCols)
        CALL    SerialFlush     repeat(@PostCols)
        RTS

    PumpLine:  # Transfer line back and forth
        CALL    TransferLine
        CALL    ReverseLine
        RTS

#
# Frame-level readout operations ------------------------------------
#
    CloseShutter:  # Gives time for shutter to close (to be adapted depending on setup)
        CALL    DarkFlush     repeat(50000)
        RTS

    ReadFrame:  # Readout and acquisition of a CCD frame (window)
        JSR     FlushLine       repeat(@PreRows)
        CALL    StartOfImage
        JSR     WindowLine      repeat(@ReadRows)
        CALL    EndOfImage
        JSR     FlushLine       repeat(@PostRows)
        RTS

    FakeFrame:  # Readout of a CCD frame (window) with no data output
        JSR     FlushLine       repeat(@PreRows)
        JSR     WindowLine      repeat(@ReadRows)
        JSR     FlushLine       repeat(@PostRows)
        RTS

    PumpFrame:  # Parallel pumping
        JSR     PumpLine       repeat(@PumpNumber)
        RTS

#
# Exposure operations -----------------------------------------------
#

    Exposure25ms:  # Repeat exposure function for 25 ms
        CALL    @Exposure       repeat(10000)
        RTS

    ClearCCD:  # Clear CCD once
        JSR     FlushLine       repeat(DetectorRows)
        RTS

    AcquireFrame:  # Operations to expose (or not) a CCD frame
        JSR     ClearCCD        repeat(@CleaningNumber)
        JSR     Exposure25ms    repeat(@ExposureTime)
        JSR     CloseShutter
        RTS

[mains]
    Bias:  # Bias after clearing 
        JSR     ClearCCD    repeat(@CleaningNumber)
        JSR     ReadFrame
        END

    Acquisition:  # One acquisition exposure
        JSR     AcquireFrame
        JSR     ReadFrame
        END

    PseudoAcquisition:  # Simulates acquisition without storing image (for debugging)
        JSR     AcquireFrame
        JSR     FakeFrame
        END

    InfiniteWait:  # Slow flushing on infinite loop
        CALL    SlowFlush   repeat(infinity)
        END
        
    PocketPump:  # Acquires frame and pocket pump
        JSR     AcquireFrame
        JSR     PumpFrame
        JSR     ReadFrame
        END

