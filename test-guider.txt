# REB3 timing for E2V CCD, in new REB sequencer format
# Testing guider mode operation
# 20160916, C. Juramy: initialized from sequencer-exposure
# Keeping shutter open at all times to simulate guider in focal plane (except when waiting
# and for the full CCD frame)
# 20160926: Also there is a bug where we can't acquire a frame with the shutter open

[constants]  # will be substituted in the code at compilation time, if used
    SegRows:        2002    # Number of rows of the sensor
    SegCols:         512    # Number of columns of the sensors
    SerCols:         522    # Size of serial register
    DetectorCols:    576    # Total number of columns in a full readout
    DetectorRows:   2048    # Total number of rows in a full readout
    TimeP:            4000 ns   # Base time element of parallel transfers
    BufferP:          2500 ns   # Parallel transfer buffer time
    ISO2:             320 ns    # Time between ASPIC ramps
    TimeS:            300 ns    # Base element of serial transfers
    BufferS:           80 ns    # Buffer for serial clock crossing
    FlushS:           240 ns    # Base element for flushing the serial register
    RampTime:         320 ns    # ASPIC ramp time
    clockperiod:      10 ns     # FPGA clock period (required by the interpreter)
    ElemExposure:     25 ms     # Duration of the elementary exposure subroutine

[clocks]  # clock channels
    P1:   8  # Parallel clock 1
    P2:   9  # Parallel clock 2
    P3:  10  # Parallel clock 3
    P4:  11  # Parallel clock 4
    S1:   4  # Serial clock 1
    S2:   5  # Serial clock 2
    S3:   6  # Serial clock 3
    RG:   7  # Serial reset clock
    CL:   3  # ASPIC clamp
    RST:  2  # ASPIC integrator reset
    RD:   1  # ASPIC ramp-down integration
    RU:   0  # ASPIC ramp-up integration
    TRG: 12  # ADC sampling trigger
    SOI: 13  # Start of image
    EOI: 14  # End of image
    SHU: 16  # Shutter TTL (for testing only)

[pointers]  # can define a pointer to a function or to a repetition number (for subroutines or functions)
    REP_FUNC    PreCols      300  # Number of columns to skip before readout window, including prescan
    REP_FUNC    ReadCols      50  # Number of columns to read
    REP_FUNC    PostCols     175  # Number of columns to discard after window (it is up to the user that total
    # columns > 522)
    REP_FUNC    OverCols      50  # Number of columns acquired after line is read for baseline subtraction
    REP_SUBR    ExposureTime  80  # Duration of exposure in units of 25 ms (bypassed for guider test)
    REP_SUBR    PreRows      1000  # Number of rows to skip before window
    REP_SUBR    ReadRows       50  # Number of rows of the window
    REP_SUBR    PostRows      953  # Number of rows after window (it is up to the user that total lines > 2002)
    REP_SUBR    CleaningNumber  2  # Number of full CCD clears before acquiring a frame
    PTR_FUNC    Exposure    ExposureFlushReg  # Function to use during exposure: SerialFlushReg or ExposureFlushReg
    # or ExposureNoFlushReg or DarkNoFlushReg
    PTR_FUNC    ClosingFunc  SerialFlushReg  # Function to use during shutter closing: SerialFlushReg or DarkNoFlushReg
    REP_FUNC    ShutterTime  100000  # Repetitions of ClosingFunc function during ShutterClose 
    REP_FUNC    FlushTime  576      # Repetitions of SerialFlushReg function (or other) during FlushRegister
    
    REP_SUBR    PreFakeGuide 1  # Number of fake guiding window acquisitions before the acquired window 
    REP_SUBR    PostFakeGuide 1  # Number of fake guiding window acquisitions after the acquired window
    MAIN        Main        Bias  # Default main program

[functions]
    Default:  # Default state when not operating
      clocks:          P2, P3, S1, S2, RG, CL, RST
      slices:
         1 us        =  1,  1,  1,  1,  1,  1,  1

    TransferLine:  # Single line transfer
      clocks:          P1, P2, P3, P4, RG, CL
      slices:
         BufferP     = 0,  1,  1,  0,  1,  0
         TimeP       = 0,  0,  1,  1,  1,  0
         TimeP       = 1,  0,  0,  1,  1,  0
         TimeP       = 1,  1,  0,  0,  1,  0
         1000 ns     = 0,  1,  1,  0,  0,  0
         8000 ns     = 0,  1,  1,  0,  0,  1  # made it longer to match e2v timing
      constants:     S1=1, S2=1, RST=1

    ParallelFlush: # Single line transfer with all serial register clocks high to flush it
      clocks:          P1, P2, P3, P4
      slices:
         BufferP     = 0,  1,  1,  0
         TimeP       = 0,  0,  1,  1
         TimeP       = 1,  0,  0,  1
         TimeP       = 1,  1,  0,  0
         TimeP       = 0,  1,  1,  0  
         BufferP     = 0,  1,  1,  0
      constants: S1=1, S2=1, S3=1, RG=1, RST=1, SHU=1
 
    ReadPixel:  # Single pixel read
      clocks:          RG, S1, S2, S3, CL, RST, RD, RU, TRG
      slices:
         200 ns      = 1,  0,  1,  0,  0,  0,  0,  0,  1
         BufferS     = 1,  0,  1,  1,  0,  1,  0,  0,  0
         BufferS     = 0,  0,  0,  1,  0,  1,  0,  0,  0
         250 ns      = 0,  0,  0,  1,  1,  1,  0,  0,  0
         130 ns      = 0,  0,  0,  1,  0,  0,  0,  0,  0
         RampTime    = 0,  0,  0,  1,  0,  0,  1,  0,  0
         BufferS     = 0,  1,  0,  1,  0,  0,  0,  0,  0
         ISO2        = 0,  1,  0,  0,  0,  0,  0,  0,  0
         RampTime    = 0,  1,  0,  0,  0,  0,  0,  1,  0
         BufferS     = 0,  1,  1,  0,  0,  0,  0,  0,  0
      constants:     P2=1, P3=1

    StartOfImage:  # Signals start of frame to be recorded
      clocks:         SOI
      slices:
        1600 ns     = 0  # lets ADC finish previous conversion and transfer
        100 ns      = 1
        100 ns      = 0
      constants:    P2=1, P3=1, S1=1, S2=1, RG=1, RST=1

    EndOfImage:  # Signals end of frame to be recorded
      clocks:         EOI
      slices:
        1600 ns     = 0  # lets ADC finish conversion and transfer
        100 ns      = 1
        100 ns      = 0
      constants:    P2=1, P3=1, S1=1, S2=1, RG=1, RST=1

    SerialFlush:  # Single pixel flush with same timing as ReadPixel (1860 ns)
      clocks:          RG, S1, S2, S3
      slices:
         200 ns      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         800 ns      = 0,  0,  0,  1
         BufferS     = 0,  1,  0,  1
         620 ns      = 0,  1,  0,  0
         BufferS     = 0,  1,  1,  0
      constants:     P2=1, P3=1, RST=1, SHU=1
      
    SerialFlushReg:  # Single pixel flush with timing set by FlushS parameter 
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  1,  0,  0
         BufferS     = 1,  1,  1,  0
      constants:     P2=1, P3=1, RST=1

    ExposureFlushReg:  # Exposure while flushing serial register (testing only), same timing as SerialFlushReg
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  1,  0,  0
         BufferS     = 1,  1,  1,  0
      constants:     P2=1, P3=1, RST=1, SHU=1

    DarkNoFlushReg:  # Dark without flushing serial register, same timing as SerialFlushReg
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  1,  1,  0
         BufferS     = 1,  1,  1,  0
         FlushS      = 1,  1,  1,  0
         BufferS     = 1,  1,  1,  0
         FlushS      = 1,  1,  1,  0
         BufferS     = 1,  1,  1,  0
      constants:     P2=1, P3=1, RST=1

    ExposureNoFlushReg:  # Exposure without flushing serial register (testing only), same timing as SerialFlushReg
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  1,  1,  0
         BufferS     = 1,  1,  1,  0
         FlushS      = 1,  1,  1,  0
         BufferS     = 1,  1,  1,  0
         FlushS      = 1,  1,  1,  0
         BufferS     = 1,  1,  1,  0
      constants:     P2=1, P3=1, RST=1, SHU=1
      
    SerialFlushP3:  # Single pixel flush with RG high all the time, part of mixed serial parallel flush
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  1,  0,  0
         BufferS     = 1,  1,  1,  0
      constants:     P3=1, P4=1, RST=1, SHU=1

    SerialFlushP4:  # Single pixel flush with RG high all the time, part of mixed serial parallel flush
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  1,  0,  0
         BufferS     = 1,  1,  1,  0
      constants:     P1=1, P4=1, RST=1, SHU=1

    SerialFlushP1:  # Single pixel flush with RG high all the time, part of mixed serial parallel flush
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  1,  0,  0
         BufferS     = 1,  1,  1,  0
      constants:     P1=1, P2=1, RST=1, SHU=1

   SlowFlush:  # Simultaneous serial and parallel flush, slow (waiting pattern)
      clocks:         RG, S1, S2, S3, P1, P2, P3, P4
      slices:
         TimeP       = 1,  0,  1,  0,  0,  1,  1,  0
         TimeP       = 0,  0,  0,  1,  0,  1,  1,  0
         TimeP       = 0,  1,  0,  0,  0,  1,  1,  0
         TimeP       = 0,  0,  1,  0,  0,  1,  1,  0
         TimeP       = 0,  0,  0,  1,  0,  1,  1,  0
         TimeP       = 0,  1,  0,  0,  0,  1,  1,  0
         TimeP       = 0,  0,  1,  0,  0,  1,  1,  0
         TimeP       = 0,  0,  0,  1,  0,  1,  1,  0
         TimeP       = 0,  1,  0,  0,  0,  1,  1,  0
         TimeP       = 1,  0,  1,  0,  0,  1,  1,  0
         20000 ns    = 1,  0,  1,  0,  0,  0,  1,  1
         20000 ns    = 1,  0,  1,  0,  1,  0,  0,  1
         20000 ns    = 1,  0,  1,  0,  1,  1,  0,  0
         20000 ns    = 0,  0,  1,  0,  0,  1,  1,  0
     constants:     CL=1, RST=1
     
[subroutines]
    FlushLine:  # Transfer line and flush it
        CALL    ParallelFlush
        RTS
        
    MixedFlushLine:  # Transfer single line while flushing serial register (matches ParallelFlush timing)
        CALL    SerialFlushReg  repeat(2)
        CALL    SerialFlushP3   repeat(5)
        CALL    SerialFlushP4   repeat(5)
        CALL    SerialFlushP1   repeat(5)
        CALL    SerialFlushReg  repeat(8)
        RTS

    FlushRegister:  # Flushing serial register from accumulated charges
        CALL    ExposureFlushReg   repeat(@FlushTime)
        RTS

    WindowLine:  # Line readout
        CALL    TransferLine
        CALL    SerialFlushReg     repeat(@PreCols)
        CALL    ReadPixel       repeat(@ReadCols)
        CALL    SerialFlushReg     repeat(@PostCols)
        RTS
        
    FakeWindowLine:  # Fake line readout with shutter open
        CALL    TransferLine
        CALL    SerialFlushReg     repeat(@PreCols)
        CALL    SerialFlush        repeat(@ReadCols)
        CALL    SerialFlushReg     repeat(@PostCols)
        RTS    

    WindowWithOverscan:  # Line readout adding pixels in the overscan
        CALL    TransferLine
        CALL    SerialFlushReg     repeat(@PreCols)
        CALL    ReadPixel       repeat(@ReadCols)
        CALL    SerialFlushReg     repeat(@PostCols)
        CALL    ReadPixel       repeat(@OverCols)
        RTS

    ReadFrame:  # Readout and acquisition of a CCD frame (window)
        JSR     MixedFlushLine  repeat(@PreRows)
        JSR     FlushRegister
        CALL    StartOfImage
        JSR     WindowLine      repeat(@ReadRows)
        CALL    EndOfImage
        JSR     MixedFlushLine  repeat(@PostRows)
        RTS

   FakeFrame:  # Readout of a CCD frame (window) with no data output
        CALL    ExposureFlushReg  repeat(31250)
        JSR     MixedFlushLine    repeat(@PreRows)
        JSR     FlushRegister
        JSR     FakeWindowLine    repeat(@ReadRows)
        JSR     MixedFlushLine    repeat(@PostRows)
        RTS

    FullLine:  # Readout of a full CCD line, bypassing the rows and columns settings
        CALL    TransferLine
        CALL    ReadPixel       repeat(DetectorCols)
        RTS

    FullFrame:  # Readout of the full CCD frame, bypassing the rows and columns settings
        JSR     FlushRegister
        CALL    @ClosingFunc    repeat(@ShutterTime)
        CALL    StartOfImage
        JSR     FullLine      repeat(DetectorRows)
        CALL    EndOfImage
        RTS

    Exposure25ms:  # Repeat exposure function for 25 ms
        CALL    @Exposure       repeat(26042)
        RTS

    ClearCCD:  # Clear CCD once
        JSR     FlushLine       repeat(DetectorRows)
        RTS

    AcquireFrame:  # Operations to expose (or not) a CCD frame
        JSR     ClearCCD        repeat(@CleaningNumber)
        JSR     Exposure25ms    repeat(@ExposureTime)
        RTS

[mains]
    Bias:  # Bias
        JSR     ClearCCD        repeat(@CleaningNumber)
        JSR     ReadFrame
        END

    Acquisition:  # One acquisition (exposure or dark)
        JSR     AcquireFrame
        CALL    @ClosingFunc    repeat(@ShutterTime)
        JSR     ReadFrame
        END

    PseudoAcquisition:  # Simulates acquisition without storing image (for debugging)
        JSR     FakeFrame
        END

    InfiniteWait:  # Slow flushing on infinite loop
        CALL    SlowFlush   repeat(infinity)
        END
        
    Dark:  # copied from Acquisition, for compatibility with previous sequences
        JSR     AcquireFrame
        CALL    @ClosingFunc    repeat(@ShutterTime)
        JSR     ReadFrame
        END

    SimuGuider:
        JSR     ClearCCD          repeat(@CleaningNumber)
        JSR     FakeFrame         repeat(@PreFakeGuide)
        CALL    ExposureFlushReg  repeat(31250)
        JSR     ReadFrame
        JSR     FakeFrame         repeat(@PostFakeGuide)
        END
        # here we can take another frame (window with no cleaning or full frame) to see if there is glow
        # but we need to relaunch the sequencer (DAQ refuses several SOI/EOI in same sequence)

    FullAcquisition:  # full CCD frame, bypassing the rows and columns settings, no cleaning before
        JSR     FullFrame
        END

