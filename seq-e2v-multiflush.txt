# REB timing for E2V CCD
# Originally produced for the ‘DC biased’ E2V CCD
# With several options for flushing and parametrized flush speeds
# 20161012: initialized from test-multiflush.txt used at LPNHE (C. Juramy)

# NOTE that the RampTime is 320 ns to (nearly) reach LSST readout times
# so the ASPIC RC parameters should be set to 15

[constants]  # will be substituted in the code at compilation time, if used
    SegRows:        2002    # Number of rows of the sensor
    SegCols:         512    # Number of columns of the sensors
    SerCols:         522    # Size of serial register
    DetectorCols:    576    # Total number of columns in a full readout
    DetectorRows:   2048    # Total number of rows in a full readout
    TimeP:            5000 ns   # Base time element of parallel transfers
    BufferP:          2500 ns   # Parallel transfer buffer time
    TimeS:            300 ns    # Base element of serial transfers
    BufferS:           80 ns    # Buffer for serial clock crossing
    RampTime:         320 ns    # ASPIC ramp time
    ISO1:             130 ns    # Time between end of ASPIC clamp/reset and start of RD
    ISO2:             320 ns    # Time between S3 down and start of ASPIC RU
    FlushS:           540 ns    # Base element for flushing the serial register
    clockperiod:      10 ns     # FPGA clock period (required by the interpreter)
    ElemExposure:     25 ms     # Duration of the elementary exposure subroutine

[clocks]  # clock channels
    P1:   8  # Parallel clock 1
    P2:   9  # Parallel clock 2
    P3:  10  # Parallel clock 3
    P4:  11  # Parallel clock 4
    S1:   4  # Serial clock 1
    S2:   5  # Serial clock 2
    S3:   6  # Serial clock 3
    RG:   7  # Serial reset clock
    CL:   3  # ASPIC clamp
    RST:  2  # ASPIC integrator reset
    RD:   1  # ASPIC ramp-down integration
    RU:   0  # ASPIC ramp-up integration
    TRG: 12  # ADC sampling trigger
    SOI: 13  # Start of image
    EOI: 14  # End of image
    SHU: 16  # Shutter TTL (for testing only)

[pointers]  # can define a pointer to a function or to a repetition number (for subroutines or functions)
    REP_FUNC    PreCols         1  # Number of columns to skip before readout window
    # put at 1 to use as a first pixel transfer (because ADC trigger is at the beginning of ReadPixel)
    REP_FUNC    ReadCols      576  # Number of columns to read
    REP_FUNC    PostCols        0  # Number of columns to discard after window (it is up to the user that total
    # columns = 576)
    REP_FUNC    OverCols        0  # Number of columns acquired after line is read for baseline subtraction
    REP_SUBR    ExposureTime   80  # Duration of exposure in units of 25 ms
    REP_SUBR    PreRows         0  # Number of rows to skip before window
    REP_SUBR    ReadRows     2048  # Number of rows of the window
    REP_SUBR    PostRows        0  # Number of rows after window (it is up to the user that total lines = 2048)
    REP_SUBR    CleaningNumber  2  # Number of full CCD clears before acquiring a frame
    PTR_SUBR    CleaningSubr    MixedFlushLine  # Subroutine to use for clearing the frame
    PTR_FUNC    Exposure        ExposureNoFlush # Function to use during exposure: SerialFlush or ExposureFlush
    # or ExposureNoFlush or DarkNoFlush  (aside from the bursts of flushing)
    PTR_FUNC    ClosingFunc     DarkNoFlush     # Function to use during shutter closing: SerialFlush or DarkNoFlush
    REP_FUNC    ShutterTime     50000     # Repetitions of ClosingFunc function during ShutterClose (approx 100 ms)
    REP_FUNC    FlushTime      100000     # Repetitions of SerialFlush function during FlushRegister
#    MAIN        Main        Bias  # Default main program  (not implemented in CCS?)

[functions]
    Default:  # Default state when not operating
      clocks:          P2, P3, S1, S2, RG, CL, RST
      slices:
         1 us        =  1,  1,  1,  1,  1,  1,  1

    TransferLine:  # Single line transfer
      clocks:          P1, P2, P3, P4, RG, CL
      slices:
         BufferP     = 0,  1,  1,  0,  1,  0
         TimeP       = 0,  0,  1,  1,  1,  0
         TimeP       = 1,  0,  0,  1,  1,  0
         TimeP       = 1,  1,  0,  0,  1,  0
         1000 ns     = 0,  1,  1,  0,  0,  0
         8000 ns     = 0,  1,  1,  0,  0,  1  # made it longer than TimeP to match e2v timing
      constants:     S1=1, S2=1, RST=1

    ParallelFlush: # Single line transfer with all serial register clocks high to flush it
      clocks:          P1, P2, P3, P4
      slices:
         7500 ns     = 0,  1,  1,  0
         15000 ns    = 0,  0,  1,  1
         15000 ns    = 1,  0,  0,  1
         15000 ns    = 1,  1,  0,  0
         36000 ns    = 0,  1,  1,  0  # made it longer than TimeP to match e2v timing
         7500 ns     = 0,  1,  1,  0
      constants: S1=1, S2=1, S3=1, RG=1, RST=1
 
    ReadPixel:  # Single pixel read
      clocks:          RG, S1, S2, S3, CL, RST, RD, RU, TRG
      slices:
         200 ns      = 1,  0,  1,  0,  0,  0,  0,  0,  1
         BufferS     = 1,  0,  1,  1,  0,  1,  0,  0,  0
         BufferS     = 0,  0,  0,  1,  0,  1,  0,  0,  0
         250 ns      = 0,  0,  0,  1,  1,  1,  0,  0,  0
         ISO1        = 0,  0,  0,  1,  0,  0,  0,  0,  0
         RampTime    = 0,  0,  0,  1,  0,  0,  1,  0,  0
         BufferS     = 0,  1,  0,  1,  0,  0,  0,  0,  0
         ISO2        = 0,  1,  0,  0,  0,  0,  0,  0,  0
         RampTime    = 0,  1,  0,  0,  0,  0,  0,  1,  0
         BufferS     = 0,  1,  1,  0,  0,  0,  0,  0,  0
      constants:     P2=1, P3=1

    StartOfImage:  # Signals start of frame to be recorded
      clocks:         SOI
      slices:
        1600 ns     = 0  # lets ADC finish previous conversion and transfer
        100 ns      = 1
        100 ns      = 0
      constants:    P2=1, P3=1, S1=1, S2=1, RG=1, RST=1

    EndOfImage:  # Signals end of frame to be recorded
      clocks:         EOI
      slices:
        1600 ns     = 0  # lets ADC finish conversion and transfer
        100 ns      = 1
        100 ns      = 0
      constants:    P2=1, P3=1, S1=1, S2=1, RG=1, RST=1

    SerialFlush:  # Single pixel flush with timing set by FlushS parameter, RG high at all times
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  1,  0,  0
         BufferS     = 1,  1,  1,  0
      constants:     P2=1, P3=1, RST=1

    ExposureFlush:  # Exposure while flushing serial register (testing only), same timing as SerialFlush
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  1,  0,  0
         BufferS     = 1,  1,  1,  0
      constants:     P2=1, P3=1, RST=1, SHU=1

    DarkNoFlush:  # Dark without flushing serial register, same timing as SerialFlush
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  1,  1,  1
         BufferS     = 1,  1,  1,  1
         FlushS      = 1,  1,  1,  1
         BufferS     = 1,  1,  1,  1
         FlushS      = 1,  1,  1,  1
         BufferS     = 1,  1,  1,  1
      constants:     P2=1, P3=1, RST=1

    ExposureNoFlush:  # Exposure without flushing serial register (testing only), same timing as SerialFlush
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  1,  1,  1
         BufferS     = 1,  1,  1,  1
         FlushS      = 1,  1,  1,  1
         BufferS     = 1,  1,  1,  1
         FlushS      = 1,  1,  1,  1
         BufferS     = 1,  1,  1,  1
      constants:     P2=1, P3=1, RST=1, SHU=1

    SerialFlushP34:  # Single pixel flush with RG high all the time, part of mixed serial/parallel flush
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  1,  0,  0
         BufferS     = 1,  1,  1,  0
      constants:     P3=1, P4=1, RST=1

    SerialFlushP41:  # Single pixel flush with RG high all the time, part of mixed serial/parallel flush
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  1,  0,  0
         BufferS     = 1,  1,  1,  0
      constants:     P1=1, P4=1, RST=1

    SerialFlushP12:  # Single pixel flush with RG high all the time, part of mixed serial/parallel flush
      clocks:          RG, S1, S2, S3
      slices:
         FlushS      = 1,  0,  1,  0
         BufferS     = 1,  0,  1,  1
         FlushS      = 1,  0,  0,  1
         BufferS     = 1,  1,  0,  1
         FlushS      = 1,  1,  0,  0
         BufferS     = 1,  1,  1,  0
      constants:     P1=1, P2=1, RST=1

    SlowFlush:  # Simultaneous serial and parallel flush, slow (waiting pattern)
      clocks:         RG, S1, S2, S3, P1, P2, P3, P4
      slices:
         TimeP       = 1,  0,  1,  0,  0,  1,  1,  0
         TimeP       = 0,  0,  0,  1,  0,  1,  1,  0
         TimeP       = 0,  1,  0,  0,  0,  1,  1,  0
         TimeP       = 0,  0,  1,  0,  0,  1,  1,  0
         TimeP       = 0,  0,  0,  1,  0,  1,  1,  0
         TimeP       = 0,  1,  0,  0,  0,  1,  1,  0
         TimeP       = 0,  0,  1,  0,  0,  1,  1,  0
         TimeP       = 0,  0,  0,  1,  0,  1,  1,  0
         TimeP       = 0,  1,  0,  0,  0,  1,  1,  0
         TimeP       = 1,  0,  1,  0,  0,  1,  1,  0
         20000 ns    = 1,  0,  1,  0,  0,  0,  1,  1
         20000 ns    = 1,  0,  1,  0,  1,  0,  0,  1
         20000 ns    = 1,  0,  1,  0,  1,  1,  0,  0
         20000 ns    = 0,  0,  1,  0,  0,  1,  1,  0
     constants:     CL=1, RST=1
     
[subroutines]
# including several options to flush lines
    FlushLine:  # Transfer line with all serial clocks and reset high
        CALL    ParallelFlush
        RTS

    MixedFlushLine:  # Transfer single line while flushing serial register (matches roughly TransferLine timing)
        CALL    SerialFlush
        CALL    SerialFlushP34   repeat(3)
        CALL    SerialFlushP41   repeat(3)
        CALL    SerialFlushP12   repeat(3)
        CALL    SerialFlush      repeat(5)
        RTS

    PixelFlushLine:  # Transfer line and flush it pixel by pixel
        CALL    TransferLine
        CALL    SerialFlush     repeat(DetectorCols)
        RTS

    FlushRegister:  # Flushing serial register from accumulated charges
        CALL    SerialFlush     repeat(@FlushTime)
        RTS

    WindowLine:  # Line readout
        CALL    TransferLine
        CALL    SerialFlush     repeat(@PreCols)
        CALL    ReadPixel       repeat(@ReadCols)
        CALL    SerialFlush     repeat(@PostCols)
        RTS

    WindowWithOverscan:  # Line readout adding pixels in the overscan
        CALL    TransferLine
        CALL    SerialFlush     repeat(@PreCols)
        CALL    ReadPixel       repeat(@ReadCols)
        CALL    SerialFlush     repeat(@PostCols)
        CALL    ReadPixel       repeat(@OverCols)
        RTS

    ReadFrame:  # Readout and acquisition of a CCD frame (window)
        JSR     FlushLine       repeat(@PreRows)
        JSR     FlushRegister
        CALL    StartOfImage
        JSR     WindowLine      repeat(@ReadRows)
        CALL    EndOfImage
        JSR     FlushLine       repeat(@PostRows)
        RTS

    FakeFrame:  # Readout of a CCD frame (window) with no data output
        JSR     FlushLine       repeat(@PreRows)
        JSR     FlushRegister
        JSR     WindowLine      repeat(@ReadRows)
        JSR     FlushLine       repeat(@PostRows)
        RTS

    CloseShutter:  # Gives time for shutter to close (to be adapted depending on setup)
        CALL    @ClosingFunc    repeat(@ShutterTime)
        RTS

    Exposure25ms:  # Repeat exposure function for 25 ms (old version)
        CALL    @Exposure       repeat(13441)
        RTS
        
    ExposurePulse25ms:  #   Elementary exposure with flush and hold lasting 25 ms
        CALL    SerialFlush   repeat(541)
        CALL    @Exposure     repeat(12900)                              
        RTS

    ClearCCD:  # Clear CCD once
        JSR     @CleaningSubr      repeat(DetectorRows)
        RTS

    AcquireFrame:  # Operations to expose (or not) a CCD frame
        JSR     ClearCCD           repeat(@CleaningNumber)
        JSR     ExposurePulse25ms  repeat(@ExposureTime)
        JSR     CloseShutter
        RTS


[mains]
    Bias:  # Bias without clearing first
        JSR     ReadFrame
        END
        
    Clear:  # Clearing only
        JSR     ClearCCD        repeat(@CleaningNumber)
        END
        
    ClearBias:  # Bias after clearing up CCD content
        JSR     ClearCCD        repeat(@CleaningNumber)
        JSR     ReadFrame
        END

    Acquisition:  # One acquisition (exposure or dark)
        JSR     AcquireFrame
        JSR     ReadFrame
        END

    PseudoAcquisition:  # Simulates acquisition without storing image (for debugging)
        JSR     AcquireFrame
        JSR     FakeFrame
        END

    InfiniteWait:  # Slow flushing on infinite loop
        CALL    SlowFlush   repeat(infinity)
        END
        
    Dark:  # copied from Acquisition, for compatibility with previous sequences
        JSR     AcquireFrame
        JSR     ReadFrame
        END
